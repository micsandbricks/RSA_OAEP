#ifndef OS2IP_H
#define OS2IP_H

#include <gmp.h>

void os2ip(mpz_t *n, struct octet_string os);
void int_from_base_256(mpz_t *n, int octets[], int num_octets);
int hex_integer(char hex_char);

/*  os2ip

    Purpose:
    A function used to convert an octet string to an integer.

    Input:
    mpz_t *n: The integer to be generated by the octet string.
    struct octet_string os: The octet string used to generate integer.

    Output:
    Void.
*/
void os2ip(mpz_t *n, struct octet_string os)
{
    int octets[os.num_octets];
    int octet_index = 0;
    int i;

    int temp_octet;
    int hex_base_first_coeff;
    int hex_base_second_coeff;
    
    i = 2;
    while (i < os.str_len)
    {
        hex_base_first_coeff = hex_integer(*(os.str_pointer + i));
        i++;
        hex_base_second_coeff = hex_integer(*(os.str_pointer + i));
        temp_octet = (16*hex_base_first_coeff) + hex_base_second_coeff;
        octets[octet_index] = temp_octet;
        octet_index++;
        i += 3;
    }

    int_from_base_256(n, octets, os.num_octets);
}


/*  int_from_base_256

    Purpose:
    Generate an integer using representation base 256, the coefficients
    of each base taken from the octets array.

    Input:
    mpz_t *n: The integer to be generated. 
    int octets[]: An array of octets used as coefficients in representation 
    base 256.
    int num_octets: The number of elements in octets.

    Output:
    Void.
*/
void int_from_base_256(mpz_t *n, int octets[], int num_octets)
{
    int octet_index = 0;
    int l_diff;
    mpz_t base;
    mpz_t m;
    mpz_t coeff;

    mpz_init(base);
    mpz_init(m);
    mpz_init(coeff);

    mpz_set_ui(base, 256);

    l_diff = num_octets - 1;
    while (l_diff > 0)
    {
        mpz_pow_ui(coeff, base, l_diff);
        mpz_mul_ui(coeff, coeff, octets[octet_index]);
        mpz_add(m, m, coeff);
        octet_index++;
        l_diff--;
    }
    mpz_add_ui(m, m, octets[octet_index]);

    mpz_set(*n, m);
}

/*  hex_integer

    Purpose:
    A function used to get an integer from hexadecimal characters.

    Input:
    char hex_char: The hex character we want an integer for.

    Output:
    int: The integer corresponding to hex_char.
*/
int hex_integer(char hex_char)
{
        
    switch (hex_char){
        case 'a':
            return 10;
        case 'b':
            return 11;
        case 'c':
            return 12;
        case 'd':
            return 13;
        case 'e':
            return 14;
        case 'f':
            return 15;
        default:
            return hex_char - '0';
    }
}
#endif
